def solution(brown, yellow):
    answer = []  # 최종적으로 반환할 답을 저장할 리스트
    div = {}  # 노란색 타일의 약수를 저장할 딕셔너리

    # 노란색 타일(yellow)의 약수를 구한다. 
    # i는 노란색 타일의 가로 또는 세로 길이가 될 수 있는 값.
    for i in range(1, int(yellow**(1/2)) + 1):  # yellow의 제곱근까지 반복
        if yellow % i == 0:  # yellow가 i로 나누어 떨어지면
            div[i] = yellow // i  # i는 가로 또는 세로, yellow // i는 대응하는 다른 길이

    # 이제 구한 약수 쌍들을 가지고 브라운 타일의 개수와 맞는지 확인한다.
    for i in div:
        # 현재 약수에 해당하는 가로/세로 길이에서 브라운 타일의 둘레를 계산
        length = 2 * i + 2 * div[i]  # 노란색 타일 주변을 둘러싼 브라운 타일의 개수
        buq = brown  # 남은 브라운 타일 수
        j = 0  # 반복 횟수를 기록 (확장되는 테두리 단계)

        # 남은 브라운 타일 개수가 0보다 클 때까지 계속 테두리 크기를 늘려가며 체크
        while buq > 0:
            buq -= length + 4  # 테두리의 타일 수에서 4개 더해서 남은 브라운 타일에서 빼준다
            length += 8  # 다음 반복에서 테두리는 8개의 브라운 타일이 더 필요함 (상하좌우 각각 2개씩)
            j += 1  # 반복 카운트를 증가시켜 테두리 확장 횟수 기록
        
        # 만약 남은 브라운 타일이 정확히 0이 되었다면 조건에 맞는 사각형 크기임
        if buq == 0:
            # 가로와 세로 크기를 계산하여 정답에 추가
            answer.append(4 * j + div[i] - 2)  # 가로 길이
            answer.append(4 * j + i - 2)  # 세로 길이

    return answer  # 정답 리스트를 반환
