def solution(arrows):
    # 정답 초기화
    answer = 0
    
    # 방향에 대한 딕셔너리: 0부터 7까지 각각의 방향에 대해 (x, y) 좌표의 변화를 정의
    d = {
        0: (-1, 0),  # 북쪽
        1: (-1, 1),  # 북동쪽
        2: (0, 1),   # 동쪽
        3: (1, 1),   # 남동쪽
        4: (1, 0),   # 남쪽
        5: (1, -1),  # 남서쪽
        6: (0, -1),  # 서쪽
        7: (-1, -1)  # 북서쪽
    }
    
    # 시작점 (0, 0)으로 초기화
    x = (0, 0)
    
    # 방문한 점들을 저장할 집합 (중복 방지를 위해 set 사용)
    v = set({x})
    
    # 방문한 간선들을 저장할 집합 (중복 방지를 위해 set 사용)
    e = set()

    # 주어진 화살표 방향들에 대해 순차적으로 처리
    for arrow in arrows:
        # 각 방향에서 두 번의 이동 처리 (대각선 이동 시 중간 점도 고려)
        for i in range(2):
            # 현재 위치에서 해당 방향으로 이동하여 새로운 위치 y를 계산
            y = (x[0] + d[arrow][0], x[1] + d[arrow][1])
            
            # 새로운 위치 y를 방문한 점들 집합에 추가
            v.add(y)
            
            # 현재 위치와 새로운 위치 사이의 간선을 방문한 간선들 집합에 추가
            # (x, y)와 (y, x)를 동일한 간선으로 처리하기 위해 (min(x, y), max(x, y)) 형태로 저장
            e.add((min(x, y), max(x, y)))
            
            # 다음 이동을 위해 현재 위치를 업데이트
            x = y
        
    # 오일러 공식 V - E + F = 1 을 활용하여 면의 수 F를 구하고, 그것이 정답이 된다.
    # 여기서 V는 점의 개수, E는 간선의 개수, F는 면의 개수
    # F = E - V + 1 이므로, 이를 정답으로 설정
    answer = len(e) - len(v) + 1
        
    # 정답 반환
    return answer
